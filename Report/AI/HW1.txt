Derek Reimanis
AI HW 1

1.)
	a) We assume the agent to:
		-Have a performance measure of total clean squares, and a total of 1000 time steps.
		The function described in the Figure satifies this assumption. The number of time steps the agent can perform 
		can be limited by only allowing a percept sequence of size 1000. This means only 1000 possible moves can be made.
		We can observe the environment during the agent's actions to accumulate points based on clean square.
		
		-The agent has prior knowledge of the environment
		This assumption is satisfied through the percept sequence. Any action not listed in the percept sequence is
		illegal, and the percept sequence accounts for all actions. Clean squares in the environment stay clean through
		the operation.
		
		-There are only three available actions (right, left, and suck)
		As we can see from the percept sequence, in all recognized possible environments, the only actions are 'right', 
		'left', and 'suck'.
		
		-The agent perceives its location and whether dirt is present in that location
		We can assume the agent has sensors which construct the order of percept sequence to follow.
		
		The course of actions the vacuum-cleaner agent can make is deterministic, which is interesting.
		It matches all the criteria of rationality.
		Therefore, it is rational!

		
	b)	If we were to design a rational agent function with the functionality that moving costs one point, you would have
		to consider whether or not the agent should move now and sacrifice one point, at the expense of future points 
		gathered. Certainly, this function must be optimized as a result of repeated checks on the environment. I would 
		design the function under the assumption that the environment's state can be predicted up to some degree, provided
		that a similar state occurred in the past.
	
		Yes, the agent requires internal state. Because the agent is rational, it has a performance measure. The agent tries
		to achieve the maximum performance. In some cases, maximum performance can be achieved by sacrificing points up front.
		In other cases, the agent may need to wait. There is clear distinction here! Because of that distinction, internal 
		states are necessary for the agent to attempt to achieve the highest score.
		
		
	c)	In the described case, I would build an agent to recognize the environment first and foremost. The agent would be 
		interally building the environment for every move it makes. I would have the agent move in a straight line until it 
		encountered an obstacle. While it was moving, it would clean any dirty floors. Once an obstacle was encountered, the 
		agent should establish the environment by staying on the perimeter of the environment. Once the perimeter is 
		established, the agent should start cleaning floor spots. 
		It does make sense for the agent to learn from earlier experiences. I don't think this should be done until the 
		environment is set up. The purpose of this is to ensure the agent doesn't leave any space completely unchecked.
		The agent should specifically learn spots that frequently get dirty. The agent should then plan a route to check
		the frequently dirty areas first, and move on.
		

2.)
		-----------------------------------------------------------------------------------------------------
		|	Agent Type	|	Performance Measure	|	Environment		|	Actuators		|	Sensors			|
		|---------------------------------------------------------------------------------------------------|
		|				|	Scores, possession,	|	field			|	kicking,		|trajectory of ball,|
	a)	|Playing Soccer	|	shots, cards		|					|	throwing,		|location of players|
		|				|						|					|	running			|field boundaries	|
		|---------------------------------------------------------------------------------------------------|
		|	Exploring 	|reliable communication,| 	Titan			|	locomotion,		|material tests,	|
	b)	|	oceans on 	|finding an ocean		|					|	sampling		|movement sensor	|
		|	Titan		|						|					|					|					|
		|---------------------------------------------------------------------------------------------------|
		|Shopping for 	|condition of book,		|	internet		|	bids,			|site rating,		|
	c)	|used AI books	|price					|					|	query seller,	|seller rating		|
		|				|						|					|					|					|
		|---------------------------------------------------------------------------------------------------|
		|				|Scores, average games	|	tenis court		|hitting, serving	|					|
	d)	|Playing Tenis	|per match, aces		|					|					|court boundaries,	|
		|				|						|					|					| trajectory of ball|
		|---------------------------------------------------------------------------------------------------|
		|Practicing 	|speed of ball,			|	location with	|serving, hitting	|trajectory of ball,|
	e)	|Tenis on a 	|location on wall		|	a decent wall	|					| force applied to 	|
		|	Wall		|						|					|					| ball when hit		|
		|---------------------------------------------------------------------------------------------------|
		|Performing a	|	height of jump		|	high jump area	| initial run,		|height (and maybe 	|
	f)	|High Jump		|						|					|	push off		|witdh) measurements|
		|				|						|					|	landing			|	(yardstick)		|
		|---------------------------------------------------------------------------------------------------|
		|Knitting a 	|	speed, thread used,	|	sweater			|needle motions,	|consistency of 	|
	g)	|sweater		|	color association	|					|apply different 	|stitch-work, 		|
		|				|						|					|threads			|appearance			|
		|---------------------------------------------------------------------------------------------------|
		|Bidding on an 	|if we out-played the 	|	auction with a 	|	bids (large and	|auctioneer's voice,|
	h)	|item at an 	|other auctioners		|	known item		|	small)			|other people's 	|
		|auction		|--got the item for less|					|					|response to item	|
		-----------------------------------------------------------------------------------------------------
		
		
		Agent type: Thing we are trying to automate intelligently
		Performance Measure: Hedonistic approach to reward performance
		Environment: What the agent is acting on
		Actuator: What the agent does to alter the environment
		Sensors: How the agent perceives the environment
		
	Characterizations:
	a)	fully observable, multiagent, deterministic, sequential, static, discrete, known
	
	b)	partially observable, single agent, stochastic, episodic, dynamic, continuous, known
	
	c)	partially observable, single agent, stochastic, sequential, dynamic, continuous, unknown
	
	d)	fully observable, multiagent, deterministic, sequential, static, discrete, known
	
	e)	fully observable, single agent, deterministic, episodic, static, continuous, known
	
	f)	fully observable, single agent, deterministic, episodic, static, discrete, known
	
	g)	partially observable, single agent, deterministic, episodic, dynamic, discrete, unknown
	
	h)	partially observable, multiagent, stochastic, sequential, static, discrete, unknown
		
		
		
3.)
	a)	NOTE: We don't know that one exact solution exists... It could be many.
			also, watch out for loops! Once a track is complete, we are good. Don't rearrange after.
			Assuming every piece must fit on the track:
		
		1: Prepare a tree in which each track piece will represent a node.
		2: Start with a track piece as the root.
		3: Loop (while not all track pieces are used)
		4: Build a tree stemming from the root, such that each track can legally make a connection (ball and socket)
			to its parent track on the tree.
			-Include flipping of all the nodes.
		5: Once a track is used, remove it from the set of remaining tracks.
		
		^ This is EVERY railway... To just build ONE, try this:
		
		1: Prepare a tree in which each track piece will represent a node.
		2: With all the tracks with 45 degree angles, combine every two of them //We now have 90 degrees and are orthogonal!
		3: Split all the pieces into two equal groups //this will be a symmetric design
		4: Mirroring what is done for each group, do the algorithm above.
		5: Combine the tracks by flipping one over!
		
		
	b)	I like the idea of a Depth First Search for this problem. 
		We know the size of the search area, as there are a limited number of possible configurations for the track. 
		This means BFS will give us all the possible configurations at the end of it's run, not a fast single configuration.
		We don't know a solution ahead of time, so bi-directional is out of the question. And iterative-deepening search
		is pointless because we have a confined area that MUST be matched. No need for iteration.
		With the DFS, we build a tree, then shoot down paths of the tree and see if it works.
		It will eventually work, and we won't have to use up the exhaustive resources BFS uses.
		
		
		
	c)	If we exclude all the 'fork' pieces:
		-The end track MUST be in a loop (360 degrees)
			-The straight pieces offer 0 degrees of change.
			-Because the curved pieces subtend 45 degrees each, we need 8 of them to result in a full circle.
			-We have 16 of them, so we must include 720 degrees of freedom (or two circles).
			-There are no tracks which deviate from the single track.
			-At maximum, with no overlap, a single track can only include 360 degrees.
			
			
		If we exclude one 'fork' piece: (or three)
			-We have an odd number of degrees. We can't make a loop with the resulting 855 degrees.
		
		If we exclude two 'fork' pieces:
			-Same problem as above. We now have 1000 degrees we need to account for.
			-This number cannot represent a loop.
		
		In all cases, removing any fork(s) results in an unsolvable problem.
		
		
	d)	State space size:
		BFS algorithm:	8 different rotations for each piece.
						32 different pieces
						2 possible orientations (flipped or otherwise)
						
						32^16
		
						= O(b^16)		//quite large!
		
		DFS algorithm:	4 possible rotations for each piece.
						24 different pieces
						2 possible orientations
						but, we're doing 1/2 the work (the mirroring)
						
						24^8 / 2
		
						= O(b^8)	//still high..
						
						
4.)	Taken from reference (1):
	
	The average solution distance for ~175,000 8-puzzle run-throughs was very close to 22 moves (closer to ~22.5). 	(Figure 2)
	The average difference of manhatten moves to actual solution moves for the same data set appears to be 7.		(Figure 3)
	
	That is, h*(n) = h'(n) + 7	where h'(n) is the Manhatten distance.
	
	We can find the ratio of actual moves to Manhatten distance to be = 22 / (22-7) = 22 / 15 = ~1.4667.
	
	If we truncate, (it is a heuristic, let's not predict too close to the actual!), we can get 1.4.
	
	As a new heuristic, one can take the Manhatten distance and multiply by the ratio found above.
		h(n) = (h'(n) * 1.4)
		
	This new heuristic certainly satisfies the same constraints as the regular Manhatten distance heuristic.
	
	Although, it is NOT Admissible! The formulations above are mearly based on averages. Sometimes, the heuristic will overestimate the actual cost.
	
	
	Proof:
		-
	
	
5.)
	The skew of the pieces has a direct result on whether the track can be made complete or not. 
	
	We could apply a rank to how close to completion a given track is. We can take a measure of all the sockets that are not filled, and 
	use that to determine just how close we are (So a local minimum). Let's call this the 'socket ranking'.
	It might also be frugal to include a ranking of distance in between the socket and the ball that connects into it. 
	This way we can determine how much of an effect the skew on any piece is having on the entire track. This is the 'Distance ranking'.
	With all the pieces connected, we apply simulated annealing to one piece. 
	We hill-climb on that piece until a minimum distance rank is reached. 
	If we can't increase the rank any further, then go on to another piece. Do this until the track is complete.
	
	
	Psuedo-code:
	
	1: Build a tree of possibilities as in #3.
	2: Assign a rank to how close the puzzle is to completion (Based on empty sockets)
	3: For the connections with socket ranking of 1 (ie, 1 empty socket) and a low distance ranking, select a piece.
	4: Randomize the skew of the piece, then hill-climb using the distance ranking as a guide.
	5: Repeat 3 until track is complete.
	
	--Side note, 'randomizing the skew' can refer to removing the individual piece and replacing it. 
	
	
	
	
References:

1: Marshall, Casey. "Heuristsics for Solving the Eight Puzzle." 2007. Web. 7 Sep 2012. <http://csci.lakeforest.edu/~das/cs325/Homework/HW1/Report.pdf>. 
	--Reference was not well documented. The author did not present how he/she got all their data. Statistical analysis was not present, either.
						
						
						
						
						
		
		
		
		